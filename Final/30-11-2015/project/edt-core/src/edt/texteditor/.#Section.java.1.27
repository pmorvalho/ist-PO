package edt.texteditor;

import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;

/** 
 *  Class that represents the concept of a Section. 
 *	Has a title, a list of subsections and a list of paragraphs.
 */
public class Section extends TextElement implements Serializable {

/*==============================================================================
 *	Attributes
 *============================================================================*/
	/**
	 *  The list of subsections.
	 */
	private ArrayList<Section> _subsections = new ArrayList<Section>();
	/** 
	 *  The list of paragraphs.
	 */
	private ArrayList<Paragraph> _paragraphs = new ArrayList<Paragraph>();
	/** 
	 *  The title.
	 */
	private String _title = "";

/*==============================================================================
 *	Getters and Setters
 *============================================================================*/
	/** 
	 *  Returns the title of the section.
	 *
	 *  @return _title
	 */
	public String getTitle(){
	  return _title;
	}

	/** 
	 *  Changes the tile of the section.
	 *
	 *  @param title  the new title
	 */
	public void setTitle(String title){
		_title = title;
	}

	/** 
	 *  Returns the list of subsections.
	 * 
	 *  @return _subsections
	 */
	public ArrayList<Section> getSubsections(){
		return _subsections;
	}

	public ArrayList<Paragraph> getParagraphs(){
		return _paragraphs;
	}

	/** 
	 *	Gets section that has a specific unique id.
	 *
	 *	@param unique_id  the unique id
	 *	@return the section that has the unique id
	 */
	public Section getSection(String unique_id){
	  for(Section section : _subsections){
	    if (section.getId()==unique_id){
	      return section;
	    }
	  }
	  return null;
	}

	/** 
	 *	Gets section located at a local id.
	 *	
	 *	@param local_id  the local id
	 *	@return the section located at local id
	 */
	public Section getSection(int local_id){
		return _subsections.get(local_id);
	}

	public Paragraph getParagraph(int localid){
		return _paragraphs.get(localid);
	}

/*==============================================================================
 *	Constructors
 *============================================================================*/
	/** 
	 *  Creates a section.
	 * 
	 */
	public Section(){

	}
	/** 
	 *  Creates a section with a title.
	 * 
	 *  @param title
	 *         	the title of the section
	 */
	public Section(String title){
		_title = title;
	}

	/** 
	 *  Creates a section with a title and an id.
	 *
	 *  @param title  the title of the section
	 *  @param id     the id of the section
	 */
	public Section(String id, String title){
		super(id);
		_title=title;
	}
	
/*==============================================================================
 *	Methods
 *============================================================================*/

	/** 
	 *	Inserts a new subsection in a specific position.
	 *
	 *	@param index       the specific position
	 *	@param subsection  the new subsection
	 */
	public Section insertSection(int index,String id,String title){
	    Section subsection = new Section(id, title);
		if((index == -1)||(index >= _subsections.size())){
			_subsections.add(subsection);
		}
		else{ 
			_subsections.add(index,subsection);
		}
	     return subsection;
	}

	/** 
	 *  Inserts a new paragraph in a specific position.
	 *  
	 *	@param index      the specific position
	 * 	@param paragraph  the paragraph
	 */
	public void insertParagraph(int index,String text){
		Paragraph paragraph = new Paragraph(text);
		if((index < 0)||(index >= _paragraphs.size())){
			_paragraphs.add(paragraph);
		}
		else{ 
			_paragraphs.add(index,paragraph);
		}
	}

	/** 
	 * 	Gets number of bytes.
	 *
	 * 	@return the number of bytes of the section
	 */
	public int getBytes(){
		int bytes = 0;

		for(Paragraph p: _paragraphs){
			bytes+=p.getParagraphBytes();
		}

		for(Section s: _subsections){
			bytes+= s.getBytes();
		}

		return bytes + _title.length();
	}
	
	public void accept(Visitor v){
		v.visitSection(this);
	}

	public boolean hasSubsection(int index){
		if(index < 0){
			return false;
		}
		return index < _subsections.size();
	}

	public ArrayList<String> removeSection(int index) throws NoSuchSectionException, NoSuchParagraphException{
		ArrayList<String> removedSection = new ArrayList<String>();
		int i;
		try{
		for(i=_paragraphs.size(); i >0; i--){ 
		 removedSection.add(removeParagraph(i));
		}
		for(i=_subsections.size(); i> 0 ; i--) {
		removedSection.addAll(removeSection(i));
		_subsections.remove(i);
		}
		removedSection.add(getId());
		return removedSection;
		}
		catch(ArrayIndexOutOfBoundsException e){ throw new NoSuchSectionException();}
		catch(NoSuchParagraphException e){ throw new NoSuchParagraphException();}
	}

	public void removeSubsectionId(String uniqueid){
		for(Section subsection: _subsections){
			if(subsection.getId().equals(uniqueid)){
				subsection.setId("");
			}
		}
	}

	public String updateSubsectionId(String uniqueid){
		for (int i = 0; i < _subsections.size();i++) {
			String oldid = _subsections.get(i).getId();
			if(oldid.equals(uniqueid)){
				Section updatedsubsection = _subsections.get(i);
				_subsections.remove(i);
				updatedsubsection.setId("");
				_subsections.add(i,updatedsubsection);
				return oldid;
			}
		}
		return "";
	}

	public String updateParagraphId(String uniqueid){
		for (int i = 0; i < _paragraphs.size();i++) {
			String oldid = _paragraphs.get(i).getId();
			if(oldid.equals(uniqueid)){
				Paragraph updatedparagraph = _paragraphs.get(i);
				_paragraphs.remove(i);
				updatedparagraph.setId("");
				_paragraphs.add(i,updatedparagraph);
				return oldid;
			}
		}
		return "";
	}

	 public int getSubsectionsSize(){
 		return _subsections.size();
 	}

	public String getSubsectionId(int localid){
		return _subsections.get(localid).getId();
	}

	public void setSubsectionId(int localid, String uniqueid){
		Section newsubsection = _subsections.get(localid);
		newsubsection.setId(uniqueid);
		_subsections.remove(localid);
		_subsections.add(localid,newsubsection);
	}

	public void setParagraphId(int localid, String uniqueid){
		Paragraph newparagraph = _paragraphs.get(localid);
		newparagraph.setId(uniqueid);
		_paragraphs.remove(localid);
		_paragraphs.add(localid,newparagraph);		
	}

	public boolean hasParagraph(int index){
		if (index < 0) {
			return false;
		}
		return index < _paragraphs.size();
	}

	public String removeParagraph(int index) throws NoSuchParagraphException{
		try{
		Paragraph removedParagraph = _paragraphs.remove(index);
		return removedParagraph.getId();
		}
		catch(ArrayIndexOutOfBoundsException e){ throw new NoSuchParagraphException();}
	}
	
	public void editParagraph(int index, String text){
	    (_paragraphs.get(index)).setText(text);
	}
	
	public String getParagraphId(int index){
	    return _paragraphs.get(index).getId();
	}
	
	public void nameParagraph(int index, String uniqueId){
	    _paragraphs.get(index).setId(uniqueId);
	}
}
